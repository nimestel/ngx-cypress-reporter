{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2020-09-03T16:00:16.970Z",
    "end": "2020-09-03T16:00:28.063Z",
    "duration": 11093,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5c27fbc1-bb40-4ba9-a666-b56065c0895b",
      "title": "",
      "fullFile": "cypress/integration/examples/network_requests.spec.js",
      "file": "cypress/integration/examples/network_requests.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b02048f-465f-4782-b865-8089e9905dd8",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.server() - control behavior of network requests and responses",
              "fullTitle": "Network Requests cy.server() - control behavior of network requests and responses",
              "timedOut": null,
              "duration": 892,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/server\ncy.server().should(function (server) {\n    // the default options on server\n    // you can override any of these options\n    expect(server.delay).to.eq(0);\n    expect(server.method).to.eq('GET');\n    expect(server.status).to.eq(200);\n    expect(server.headers).to.be[\"null\"];\n    expect(server.response).to.be[\"null\"];\n    expect(server.onRequest).to.be.undefined;\n    expect(server.onResponse).to.be.undefined;\n    expect(server.onAbort).to.be.undefined;\n    // These options control the server behavior\n    // affecting all requests\n    // pass false to disable existing route stubs\n    expect(server.enable).to.be[\"true\"];\n    // forces requests that don't match your routes to 404\n    expect(server.force404).to.be[\"false\"];\n    // whitelists requests from ever being logged or stubbed\n    expect(server.whitelist).to.be.a('function');\n});\ncy.server({\n    method: 'POST',\n    delay: 1000,\n    status: 422,\n    response: {}\n});\n// any route commands will now inherit the above options\n// from the server. anything we pass specifically\n// to route will override the defaults though.",
              "err": {},
              "uuid": "6d9827af-e3f0-495e-811b-3dc3669cc9ca",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1299,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments')\n    .should(function (response) {\n    expect(response.status).to.eq(200);\n    // the server sometimes gets an extra comment posted from another machine\n    // which gets returned as 1 extra object\n    expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n    expect(response).to.have.property('headers');\n    expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "3e324372-e96f-46c4-90cf-8de95b812f51",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 2302,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments')\n    .then(function (response) {\n    // https://on.cypress.io/assertions\n    expect(response).property('status').to.equal(200);\n    expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n    expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "d453dd5b-48c5-46d7-a0d1-ad2400620de9",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 807,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n    url: 'https://jsonplaceholder.cypress.io/comments',\n    qs: {\n        postId: 1,\n        id: 3\n    }\n})\n    .its('body')\n    .should('be.an', 'array')\n    .and('have.length', 1)\n    .its('0') // yields first element of the array\n    .should('contain', {\n    postId: 1,\n    id: 3\n});",
              "err": {},
              "uuid": "cd8563aa-db8f-451f-ae04-b6431a00cbf0",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 1414,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1')\n    .its('body') // yields the response object\n    .its('0') // yields the first element of the returned list\n    // the above two commands its('body').its('0')\n    // can be written as its('body.0')\n    // if you do not care about TypeScript checks\n    .then(function (user) {\n    expect(user).property('id').to.be.a('number');\n    // make a new post on behalf of the user\n    cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n        userId: user.id,\n        title: 'Cypress Test Runner',\n        body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n    });\n})\n    // note that the value here is the returned value of the 2nd request\n    // which is the new post object\n    .then(function (response) {\n    expect(response).property('status').to.equal(201); // new entity created\n    expect(response).property('body').to.contain({\n        title: 'Cypress Test Runner'\n    });\n    // we don't know the exact post id - only that it will be > 100\n    // since JSONPlaceholder has built-in 100 posts\n    expect(response.body).property('id').to.be.a('number')\n        .and.to.be.gt(100);\n    // we don't know the user id here - since it was in above closure\n    // so in this test just confirm that the property is there\n    expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "0e095128-d3a9-49c6-af87-affec702c30b",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 1082,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1')\n    .its('body').its('0') // yields the first element of the returned list\n    .as('user') // saves the object in the test context\n    .then(function () {\n    // NOTE ðŸ‘€\n    //  By the time this callback runs the \"as('user')\" command\n    //  has saved the user object in the test context.\n    //  To access the test context we need to use\n    //  the \"function () { ... }\" callback form,\n    //  otherwise \"this\" points at a wrong or undefined object!\n    cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n        userId: this.user.id,\n        title: 'Cypress Test Runner',\n        body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n    })\n        .its('body').as('post'); // save the new post from the response\n})\n    .then(function () {\n    // When this callback runs, both \"cy.request\" API commands have finished\n    // and the test context has \"user\" and \"post\" objects set.\n    // Let's verify them.\n    expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "be249f10-a245-4869-8f68-706524edab0c",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.route() - route responses to matching requests",
              "fullTitle": "Network Requests cy.route() - route responses to matching requests",
              "timedOut": null,
              "duration": 1959,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/route\nvar message = 'whoa, this comment does not exist';\ncy.server();\n// Listen to GET to comments/1\ncy.route('GET', 'comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('status').should('eq', 200);\n// Listen to POST to comments\ncy.route('POST', '/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(function (xhr) {\n    expect(xhr.requestBody).to.include('email');\n    expect(xhr.requestHeaders).to.have.property('Content-Type');\n    expect(xhr.responseBody).to.have.property('name', 'Using POST in cy.route()');\n});\n// Stub a response to PUT comments/ ****\ncy.route({\n    method: 'PUT',\n    url: 'comments/*',\n    status: 404,\n    response: { error: message },\n    delay: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "4892eb56-578b-4bf2-aa7a-fff586c31571",
              "parentUUID": "0b02048f-465f-4782-b865-8089e9905dd8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d9827af-e3f0-495e-811b-3dc3669cc9ca",
            "3e324372-e96f-46c4-90cf-8de95b812f51",
            "d453dd5b-48c5-46d7-a0d1-ad2400620de9",
            "cd8563aa-db8f-451f-ae04-b6431a00cbf0",
            "0e095128-d3a9-49c6-af87-affec702c30b",
            "be249f10-a245-4869-8f68-706524edab0c",
            "4892eb56-578b-4bf2-aa7a-fff586c31571"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9755,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "5.1.0"
    }
  }
}